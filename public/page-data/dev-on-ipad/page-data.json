{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/dev-on-ipad","result":{"data":{"brainNote":{"slug":"dev-on-ipad","title":"Dev on iPad","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dev on iPad\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The apps I currently use\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Working Copy app\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Vercel/Netlify for deployment\")), mdx(\"p\", null, \"This is not as fast as working locally on a computer, but when I want to just update the content and see if it looks good, I could change content using Working Copy and push a commit, all from an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/ipad\"\n  }), \"iPad\"), \". It could be a new branch if you don't want to update the production deployment directly. Vercel and Netlify do a great job of rebuilt and deploying the projects when we push commits to the repositories.\"), mdx(\"p\", null, \"I tried Codesandbox on iPad's Safari, but it not there yet. Honestly it's too small on my 11\\\" iPad to have code and browser open at the same time. And it is not very useable on the iPad.\"), mdx(\"p\", null, \"Hoping for a future where I get a local command line (or a Terminal) on iPad. \\uD83E\\uDD1E\"), mdx(\"h2\", null, \"Another option\"), mdx(\"p\", null, \"You can use something like Blink Shell app to SSH on to a computer on cloud. Clone your repos on it and compile.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[],"outboundReferenceNotes":[{"title":"iPad","slug":"ipad","childMdx":{"excerpt":"This has a strange place in my life. I never knew I would use it until I bought one. What do you use it for? Netflix and YouTube Drawingâ€¦"}}]},"site":{"siteMetadata":{"title":"@aravindballa's notes"}}},"pageContext":{"slug":"dev-on-ipad"}}}